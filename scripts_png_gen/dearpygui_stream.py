#!/usr/bin/env python3
"""Interactive viewer for Atlas graph outputs using DearPyGui.

This utility reads the ``*.v2.json`` or ``*.v2.json.gz`` files generated by
``scripts_png_gen/run_all_styles_optimized_with_signal_line.sh`` and displays the
contained time series.  Use ``--stream`` to animate the data points so the plot
updates in real time.
"""

from __future__ import annotations

import argparse
import gzip
import json
import time
from pathlib import Path
from typing import Iterable, List, Tuple

import dearpygui.dearpygui as dpg


def _load_graph(path: Path) -> Tuple[List[float], List[dict]]:
    """Return timestamps and time series entries from a graph JSON file."""
    if path.suffix.endswith(".gz"):
        with gzip.open(path, "rt", encoding="utf-8") as f:
            data = json.load(f)
    else:
        with path.open("r", encoding="utf-8") as f:
            data = json.load(f)

    meta = data[1]  # graph-metadata
    start = meta["startTime"] / 1000.0
    step = meta["step"] / 1000.0

    series = [obj for obj in data if obj.get("type") == "timeseries"]
    length = len(series[0]["data"]["values"]) if series else 0
    ts = [start + i * step for i in range(length)]
    return ts, series


def _add_series(plot_id: int, timestamps: List[float], series: List[dict]) -> List[int]:
    line_ids: List[int] = []
    for s in series:
        label = s.get("label") or s.get("query", "series")
        color = s.get("color")
        line_id = dpg.add_line_series([], [], label=label, parent=plot_id, color=color)
        line_ids.append(line_id)
    return line_ids


def _configure_plot(timestamps: List[float], series: List[dict], line_ids: List[int], stream: bool, delay: float) -> None:
    """Populate the plot either statically or via a render callback."""
    if stream:
        state = {"idx": 0, "last": time.perf_counter()}

        def _render_callback(sender, app_data):  # pragma: no cover - interactive GUI callback
            now = time.perf_counter()
            if now - state["last"] < delay:
                return
            if state["idx"] >= len(timestamps):
                dpg.set_render_callback(None)
                return

            t = timestamps[state["idx"]]
            for line_id, s in zip(line_ids, series):
                x, y = dpg.get_value(line_id)
                x.append(t)
                y.append(s["data"]["values"][state["idx"]])
                dpg.set_value(line_id, [x, y])
            state["idx"] += 1
            state["last"] = now

        dpg.set_render_callback(_render_callback)
    else:
        for line_id, s in zip(line_ids, series):
            dpg.set_value(line_id, [timestamps, s["data"]["values"]])


def main(argv: Iterable[str] | None = None) -> None:
    parser = argparse.ArgumentParser(description="Visualize Atlas graph output with DearPyGui")
    parser.add_argument("path", type=Path, help="Path to .v2.json or .v2.json.gz file")
    parser.add_argument("--stream", action="store_true", help="Stream data points to the plot")
    parser.add_argument("--delay", type=float, default=0.05, help="Delay between streamed points in seconds")
    args = parser.parse_args(list(argv) if argv is not None else None)

    timestamps, series = _load_graph(args.path)

    dpg.create_context()
    with dpg.window(label="Atlas Graph") as win:
        with dpg.plot(label=args.path.name, height=400, width=800) as plot_id:
            dpg.add_plot_legend()
            line_ids = _add_series(plot_id, timestamps, series)

    _configure_plot(timestamps, series, line_ids, args.stream, args.delay)

    dpg.create_viewport(title="Atlas Viewer")
    dpg.setup_dearpygui()
    dpg.show_viewport()
    dpg.set_primary_window(win, True)
    dpg.start_dearpygui()
    dpg.destroy_context()


if __name__ == "__main__":
    main()
